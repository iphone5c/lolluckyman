<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 2016/9/21 23:03:35 魏源 created. -->
<!-- Generated by Caven.CodeBuilder (funiJava.mybatis_map 1.0). -->

<mapper namespace="com.lolluckyman.business.accountassets.dao.IAccountAssetsDao">

    <resultMap type="com.lolluckyman.business.accountassets.entity.AccountAssets" id="resultMap">
        <id property="code" column="code" />
        <result property="quizMoney" column="quizmoney" />
        <result property="pensionMoney" column="pensionmoney" />
        <result property="victoryMoney" column="victorymoney" />
        <result property="freezeQuizMoney" column="freezequizmoney" />
        <result property="freezePensionMoney" column="freezepensionmoney" />
        <result property="freezeVictoryMoney" column="freezevictorymoney" />
        <result property="accountCode" column="accountcode" />
    </resultMap>

    <sql id="baseCol">
        code, quizmoney, pensionmoney, victorymoney, freezequizmoney, freezepensionmoney, freezevictorymoney, accountcode
    </sql>

    <sql id="whereSql">
        <trim prefix="WHERE" prefixOverrides="and |or ">
            <if test="code != null"><![CDATA[ and code like #{code} ]]></if>
            <if test="code_enum != null">
                <![CDATA[ and code in ]]>
                <foreach collection="code_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="quizMoney != null"><![CDATA[ and quizmoney = #{quizMoney} ]]></if>
            <if test="quizMoney_r_min != null"><![CDATA[ and quizmoney >= #{quizMoney_r_min} and quizmoney <= #{quizMoney_r_max} ]]></if>
            <if test="quizMoney_enum != null">
                <![CDATA[ and quizmoney in ]]>
                <foreach collection="quizMoney_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="pensionMoney != null"><![CDATA[ and pensionmoney = #{pensionMoney} ]]></if>
            <if test="pensionMoney_r_min != null"><![CDATA[ and pensionmoney >= #{pensionMoney_r_min} and pensionmoney <= #{pensionMoney_r_max} ]]></if>
            <if test="pensionMoney_enum != null">
                <![CDATA[ and pensionmoney in ]]>
                <foreach collection="pensionMoney_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="victoryMoney != null"><![CDATA[ and victorymoney = #{victoryMoney} ]]></if>
            <if test="victoryMoney_r_min != null"><![CDATA[ and victorymoney >= #{victoryMoney_r_min} and victorymoney <= #{victoryMoney_r_max} ]]></if>
            <if test="victoryMoney_enum != null">
                <![CDATA[ and victorymoney in ]]>
                <foreach collection="victoryMoney_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="freezeQuizMoney != null"><![CDATA[ and freezequizmoney = #{freezeQuizMoney} ]]></if>
            <if test="freezeQuizMoney_r_min != null"><![CDATA[ and freezequizmoney >= #{freezeQuizMoney_r_min} and freezequizmoney <= #{freezeQuizMoney_r_max} ]]></if>
            <if test="freezeQuizMoney_enum != null">
                <![CDATA[ and freezequizmoney in ]]>
                <foreach collection="freezeQuizMoney_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="freezePensionMoney != null"><![CDATA[ and freezepensionmoney = #{freezePensionMoney} ]]></if>
            <if test="freezePensionMoney_r_min != null"><![CDATA[ and freezepensionmoney >= #{freezePensionMoney_r_min} and freezepensionmoney <= #{freezePensionMoney_r_max} ]]></if>
            <if test="freezePensionMoney_enum != null">
                <![CDATA[ and freezepensionmoney in ]]>
                <foreach collection="freezePensionMoney_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="freezeVictoryMoney != null"><![CDATA[ and freezevictorymoney = #{freezeVictoryMoney} ]]></if>
            <if test="freezeVictoryMoney_r_min != null"><![CDATA[ and freezevictorymoney >= #{freezeVictoryMoney_r_min} and freezevictorymoney <= #{freezeVictoryMoney_r_max} ]]></if>
            <if test="freezeVictoryMoney_enum != null">
                <![CDATA[ and freezevictorymoney in ]]>
                <foreach collection="freezeVictoryMoney_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="accountCode != null"><![CDATA[ and accountcode like #{accountCode} ]]></if>
            <if test="accountCode_enum != null">
                <![CDATA[ and accountcode in ]]>
                <foreach collection="accountCode_enum" item="value" open="(" separator="," close=")">
                    <![CDATA[ #{value} ]]>
                </foreach>
            </if>
            <if test="_default_mulattr != null">
                <![CDATA[ and ]]>
                <foreach collection="_default_mulattr" item="item" open="(" separator=" or " close=")">
                    <if test="item.name == 'code'"><![CDATA[ code like #{item.value} ]]></if>
                    <if test="item.name == 'accountCode'"><![CDATA[ accountcode like #{item.value} ]]></if>
                </foreach>
            </if>
        </trim>
    </sql>

    <sql id="orderSql">
        <trim prefix="ORDER BY" suffixOverrides=",">
            <if test="_orderBy == 'code_desc'"><![CDATA[ code desc, ]]></if>
            <if test="_orderBy == 'code_asc'"><![CDATA[ code, ]]></if>
            <if test="_orderBy == 'quizMoney_desc'"><![CDATA[ quizmoney desc, ]]></if>
            <if test="_orderBy == 'quizMoney_asc'"><![CDATA[ quizmoney, ]]></if>
            <if test="_orderBy == 'pensionMoney_desc'"><![CDATA[ pensionmoney desc, ]]></if>
            <if test="_orderBy == 'pensionMoney_asc'"><![CDATA[ pensionmoney, ]]></if>
            <if test="_orderBy == 'victoryMoney_desc'"><![CDATA[ victorymoney desc, ]]></if>
            <if test="_orderBy == 'victoryMoney_asc'"><![CDATA[ victorymoney, ]]></if>
            <if test="_orderBy == 'freezeQuizMoney_desc'"><![CDATA[ freezequizmoney desc, ]]></if>
            <if test="_orderBy == 'freezeQuizMoney_asc'"><![CDATA[ freezequizmoney, ]]></if>
            <if test="_orderBy == 'freezePensionMoney_desc'"><![CDATA[ freezepensionmoney desc, ]]></if>
            <if test="_orderBy == 'freezePensionMoney_asc'"><![CDATA[ freezepensionmoney, ]]></if>
            <if test="_orderBy == 'freezeVictoryMoney_desc'"><![CDATA[ freezevictorymoney desc, ]]></if>
            <if test="_orderBy == 'freezeVictoryMoney_asc'"><![CDATA[ freezevictorymoney, ]]></if>
            <if test="_orderBy == 'accountCode_desc'"><![CDATA[ accountcode desc, ]]></if>
            <if test="_orderBy == 'accountCode_asc'"><![CDATA[ accountcode, ]]></if>
        </trim>
    </sql>

    <insert id="insertObject" parameterType="com.lolluckyman.business.accountassets.entity.AccountAssets">
        insert into
        lol_accountassets(code,quizmoney,pensionmoney,victorymoney,freezequizmoney,freezepensionmoney,freezevictorymoney,accountcode)
        values(#{code},#{quizMoney},#{pensionMoney},#{victoryMoney},#{freezeQuizMoney},#{freezePensionMoney},#{freezeVictoryMoney},#{accountCode});
    </insert>

    <update id="updateObject" parameterType="com.lolluckyman.business.accountassets.entity.AccountAssets">
        update lol_accountassets
        set quizmoney=#{quizMoney},pensionmoney=#{pensionMoney},victorymoney=#{victoryMoney},freezequizmoney=#{freezeQuizMoney},freezepensionmoney=#{freezePensionMoney},freezevictorymoney=#{freezeVictoryMoney},accountcode=#{accountCode}
        where code=#{code};
    </update>

    <delete id="deleteObject" parameterType="string">
        delete from lol_accountassets where code=#{code};
    </delete>

    <delete id="deleteObjectByWhere" parameterType="com.lolluckyman.utils.core.QueryParams">
        delete from lol_accountassets
        <include refid="whereSql" />
    </delete>

    <select id="getBaseObject" parameterType="string" resultMap="resultMap">
        select 
        <include refid="baseCol" />
        from lol_accountassets where code=#{code};
    </select>

    <select id="getDetailObject" parameterType="string" resultMap="resultMap">
        select * from lol_accountassets where code=#{code};
    </select>

    <select id="queryCount" parameterType="com.lolluckyman.utils.core.QueryParams" resultType="int">
        select count(*) from lol_accountassets
          <include refid="whereSql" />
    </select>

    <select id="queryBaseList" parameterType="com.lolluckyman.utils.core.QueryParams" resultMap="resultMap">
        select 
        <include refid="baseCol" />
        from lol_accountassets
          <include refid="whereSql" />
        <include refid="orderSql" />
    </select>

    <select id="queryDetailList" parameterType="com.lolluckyman.utils.core.QueryParams" resultMap="resultMap">
        select * from lol_accountassets
          <include refid="whereSql" />
        <include refid="orderSql" />
    </select>
</mapper> 


